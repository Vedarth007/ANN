# -*- coding: utf-8 -*-
"""ANN_forwad_backward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fj5WTitswCyDaGvJmsOdksKuQGeXfTYA
"""

import pandas as pd
import numpy as np
class NeuralNetwork:
  def __init__(self,input,hidden,output):
    self.w1=np.random.rand(input,hidden)
    self.b1=np.zeros(hidden)
    self.w2=np.random.rand(hidden,output)
    self.b2=np.zeros(output)

  def sigmoid(self,x):
    return 1/(1+np.exp(-x))

  def sigmoid_derivative(self,x):
    return x*(1-x)

  def forward(self,x):
    self.z1=x@self.w1+self.b1
    self.a1=self.sigmoid(self.z1)
    self.z2=self.a1@self.w2+self.b2
    self.a2=self.sigmoid(self.z2)
    return self.a2

  def backward(self,x,y,output):
    self.output_error= y-output
    self.output_delta=self.output_error*self.sigmoid_derivative(output)
    self.hidden_error=self.output_delta@self.w2.T
    self.hidden_delta=self.hidden_error*self.sigmoid_derivative(self.a1)
    self.w1 += x.T@ self.hidden_delta
    self.b1+=  np.sum(self.hidden_delta, axis=0)
    self.w2 += self.a1.T@self.output_delta
    self.b2 += np.sum(self.output_delta, axis=0)

  def train(self, x, y, epochs, learning_rate):
    for i in range(epochs):
      output=self.forward(x)
      self.backward(x,y,output)

  def predict(self, x):
    return self.forward(x)


x = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([[0], [1], [1], [0]])

nn=NeuralNetwork(2,4,1)

nn.train(x,y, 1000,0.5)

prediction=nn.predict(x)
print("prediction", prediction)



