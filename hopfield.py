# -*- coding: utf-8 -*-
"""hopfield.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Osr96cZGpVL9Mk1dGr59_MY-g4g54Qy
"""

import numpy as np

class Hopfield:
  def __init__ (self, patterns):
    self.num_patterns=len(patterns)
    self.pattern_length=len(patterns[0])
    self.weights=np.zeros((self.pattern_length, self.pattern_length))
    self.train(patterns)

  def train(self,patterns):
    for pattern in patterns:
      self.weights+=np.outer(pattern,pattern)
    np.fill_diagonal(self.weights,0)
    self.weights /= self.num_patterns

  def energy(self, pattern):
    return -0.5*np.dot(pattern, np.dot(self.weights,pattern))

  def update(self, pattern):
    updated_pattern=np.copy(pattern)
    for i in range(len(pattern)):
      activation=np.dot(self.weights[i], updated_pattern)
      updated_pattern[i]=1 if activation>=0 else -1
    return updated_pattern

  def recall(self, input_pattern, max_iter=100):
    pattern = np.copy(input_pattern)
    for _ in range(max_iter):
      new_pattern=self.update(pattern)
      if np.array_equal(new_pattern,pattern):
        return new_pattern
      pattern=new_pattern
    return pattern

patterns = [
    [1, -1, 1, -1],
    [-1, 1, -1, 1],
    [-1, -1, 1, 1],
    [1, 1, -1, -1]
]

hopefield = Hopfield(patterns)

print("Original :")
for pattern in patterns:
  print(pattern)
print("Recalled opattern")

for pattern in patterns:
  recalled= hopefield.recall(pattern)
  print(recalled)

