# -*- coding: utf-8 -*-
"""perceptronrule.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VYy950nA_6rZZMTrhZTYnSvpR9Y2gl2f
"""

import numpy as np
import matplotlib.pyplot as plt

X = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])
Y = np.array([-1, -1, -1, 1])

w = np.zeros(X.shape[1])
b = 0

for _ in range(6):
    for i in range(X.shape[0]):
        y_pred = np.sign(np.dot(X[i], w) + b)

        if y_pred != Y[i]:
            w += 0.3 * Y[i] * X[i]
            b += 0.3 * Y[i]

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01),
                     np.arange(y_min, y_max, 0.01))

Z = np.sign(np.dot(np.c_[xx.ravel(), yy.ravel()], w) + b)
Z = Z.reshape(xx.shape)

plt.contourf(xx, yy, Z, alpha=0.8)
plt.scatter(X[:, 0], X[:, 1], c=Y)
plt.xlabel('X1')
plt.ylabel('X2')
plt.title('Perceptron Decision Regions')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define data points and labels
X = np.array([[0, 0], [1, 0], [0, 1], [1, 1]])
Y = np.array([-1, -1, -1, 1])

# Initialize weights and bias
w = np.zeros(X.shape[1])
b = 0

# Perceptron learning loop
for _ in range(6):  # Training iterations
    for i in range(X.shape[0]):
        y_pred = np.sign(np.dot(X[i], w) + b)

        if y_pred != Y[i]:
            w += 0.3 * Y[i] * X[i]  # Update weights
            b += 0.3 * Y[i]          # Update bias

# Define meshgrid for decision region plotting
x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01),
                     np.arange(y_min, y_max, 0.01))

# Calculate decision regions
Z = np.sign(np.dot(np.c_[xx.ravel(), yy.ravel()], w) + b)
Z = Z.reshape(xx.shape)

# Plot decision regions
plt.contourf(xx, yy, Z, alpha=0.8)

# Plot original data points
plt.scatter(X[:, 0], X[:, 1], c=Y)

# Labels and title
plt.xlabel('X1')
plt.ylabel('X2')
plt.title('Perceptron Decision Regions')

# Show plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt

X=np.array([
    [0, 0], [1, 0], [0, 1], [1, 1]
])
Y = np.array([-1, -1, -1, 1])


w=np.zeros(X.shape[1])
b=0

for _ in range(6):
    for i in range(X.shape[0]):
        y_pred = np.sign(np.dot(X[i], w) + b)
        if y_pred != Y[i]:
            w += 0.3 * Y[i] * X[i]
            b += 0.3 * Y[i]

x_min,x_max= X[:,0].min() - 1, X[:,0].max() +1
y_min,y_max= X[:,1].min() - 1, X[:,1].max() +1
xx,yy= np.meshgrid(np.arange(x_min,x_max,0.1),
                  np.arange(y_min,y_max,0.1))

z=np.sign(np.dot(np.c_[xx.ravel(), yy.ravel()], w)+b)
z=z.reshape(xx.shape)

plt.contourf(xx,yy,z,alpha=0.8)
plt.scatter(X[:,0],X[:,1],c=Y)
plt.xlabel("x1")
plt.ylabel('X2')
plt.title('Perceptron Decision Regions')

# Show plot
plt.show()

